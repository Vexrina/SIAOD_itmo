package btree

const (
	degree = 2 // Минимальная степень B-дерева
)

type (
	BTree interface {
		// Insert Вставляет новый ключ в B-дерево. Если корневой узел заполнен, он разделяется, и дерево растет в высоту.
		Insert(key int)
		// Вспомогательный метод для вставки ключа в узел, который не заполнен. Если узел является листом, ключ добавляется в него. Если узел внутренний, метод рекурсивно вызывает себя для соответствующего дочернего узла.
		insertNonFull(node *Node, key int)
		// Разделяет дочерний узел, если он заполнен. Ключ из середины дочернего узла перемещается в родительский узел, а оставшиеся ключи и дочерние узлы распределяются между двумя новыми узлами.
		splitChild(parent *Node, index int)
		// Search Ищет ключ в B-дереве. Возвращает true, если ключ найден, и false в противном случае.
		Search(key int) bool
		// Вспомогательный метод для поиска ключа в поддереве, начиная с указанного узла.
		search(node *Node, key int) bool
		// Delete Удаляет ключ из B-дерева. Если корневой узел становится пустым, он заменяется своим единственным дочерним узлом.
		Delete(key int)
		// Вспомогательный метод для удаления ключа из поддерева, начиная с указанного узла. Обрабатывает различные случаи удаления, включая удаление из листа и внутреннего узла.
		delete(node *Node, key int)
		// Удаляет ключ из листа по указанному индексу.
		deleteFromLeaf(node *Node, index int)
		// Возвращает предшественника ключа в указанном узле. Предшественник — это наибольший ключ в левом поддереве.
		getPred(node *Node, index int) int
		// Возвращает преемника ключа в указанном узле. Преемник — это наименьший ключ в правом поддереве.
		getSucc(node *Node, index int) int
		// Заполняет узел-потомок, если в нем недостаточно ключей, путем заимствования у соседей или объединения узлов.
		fill(node *Node, index int)
		// Заимствует ключ у предыдущего соседа для заполнения узла.
		borrowFromPrev(node *Node, index int)
		// Объединяет два узла, если в них недостаточно ключей.
		merge(node *Node, index int)
		// Print Выводит структуру B-дерева в текстовом виде. Каждый уровень дерева отображается с указанием ключей в узлах.
		Print()
		// PrettyPrint Выводит структуру B-дерева в текстовом виде с отступами для лучшей визуализации. Каждый уровень дерева отображается с указанием ключей в узлах.
		PrettyPrint()
		// Вспомогательный метод для рекурсивного вывода структуры B-дерева с отступами.
		prettyPrintTree(node *Node, level int)
	}

	Node struct {
		leaf     bool
		keys     []int
		children []*Node
		data     []string
	}

	Tree struct {
		root *Node
	}
)
