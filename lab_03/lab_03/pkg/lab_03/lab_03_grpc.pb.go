// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/lab_03.proto

package lab_03

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lab03_LoadFile_FullMethodName    = "/lab_03.Lab03/LoadFile"
	Lab03_GetAllFiles_FullMethodName = "/lab_03.Lab03/GetAllFiles"
	Lab03_FindTerm_FullMethodName    = "/lab_03.Lab03/FindTerm"
)

// Lab03Client is the client API for Lab03 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Lab03Client interface {
	LoadFile(ctx context.Context, in *LoadFileRequest, opts ...grpc.CallOption) (*LoadFileReply, error)
	GetAllFiles(ctx context.Context, in *GetAllFilesRequest, opts ...grpc.CallOption) (*GetAllFilesResponse, error)
	FindTerm(ctx context.Context, in *FindTermRequest, opts ...grpc.CallOption) (*FindTermResponse, error)
}

type lab03Client struct {
	cc grpc.ClientConnInterface
}

func NewLab03Client(cc grpc.ClientConnInterface) Lab03Client {
	return &lab03Client{cc}
}

func (c *lab03Client) LoadFile(ctx context.Context, in *LoadFileRequest, opts ...grpc.CallOption) (*LoadFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadFileReply)
	err := c.cc.Invoke(ctx, Lab03_LoadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lab03Client) GetAllFiles(ctx context.Context, in *GetAllFilesRequest, opts ...grpc.CallOption) (*GetAllFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllFilesResponse)
	err := c.cc.Invoke(ctx, Lab03_GetAllFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lab03Client) FindTerm(ctx context.Context, in *FindTermRequest, opts ...grpc.CallOption) (*FindTermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTermResponse)
	err := c.cc.Invoke(ctx, Lab03_FindTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Lab03Server is the server API for Lab03 service.
// All implementations must embed UnimplementedLab03Server
// for forward compatibility.
type Lab03Server interface {
	LoadFile(context.Context, *LoadFileRequest) (*LoadFileReply, error)
	GetAllFiles(context.Context, *GetAllFilesRequest) (*GetAllFilesResponse, error)
	FindTerm(context.Context, *FindTermRequest) (*FindTermResponse, error)
	mustEmbedUnimplementedLab03Server()
}

// UnimplementedLab03Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLab03Server struct{}

func (UnimplementedLab03Server) LoadFile(context.Context, *LoadFileRequest) (*LoadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadFile not implemented")
}
func (UnimplementedLab03Server) GetAllFiles(context.Context, *GetAllFilesRequest) (*GetAllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFiles not implemented")
}
func (UnimplementedLab03Server) FindTerm(context.Context, *FindTermRequest) (*FindTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTerm not implemented")
}
func (UnimplementedLab03Server) mustEmbedUnimplementedLab03Server() {}
func (UnimplementedLab03Server) testEmbeddedByValue()               {}

// UnsafeLab03Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Lab03Server will
// result in compilation errors.
type UnsafeLab03Server interface {
	mustEmbedUnimplementedLab03Server()
}

func RegisterLab03Server(s grpc.ServiceRegistrar, srv Lab03Server) {
	// If the following call pancis, it indicates UnimplementedLab03Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lab03_ServiceDesc, srv)
}

func _Lab03_LoadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lab03Server).LoadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lab03_LoadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lab03Server).LoadFile(ctx, req.(*LoadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lab03_GetAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lab03Server).GetAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lab03_GetAllFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lab03Server).GetAllFiles(ctx, req.(*GetAllFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lab03_FindTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Lab03Server).FindTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lab03_FindTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Lab03Server).FindTerm(ctx, req.(*FindTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lab03_ServiceDesc is the grpc.ServiceDesc for Lab03 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lab03_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lab_03.Lab03",
	HandlerType: (*Lab03Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadFile",
			Handler:    _Lab03_LoadFile_Handler,
		},
		{
			MethodName: "GetAllFiles",
			Handler:    _Lab03_GetAllFiles_Handler,
		},
		{
			MethodName: "FindTerm",
			Handler:    _Lab03_FindTerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lab_03.proto",
}
